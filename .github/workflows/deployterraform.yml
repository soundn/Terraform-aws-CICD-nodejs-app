name: Deploy Node.js App with Database & Load Balancer

on:
  push:
    branches:
      - main

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v2
      - name: Apply Terraform Configuration
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1  # Replace with your desired region
          terraform init
          terraform apply -auto-approve

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure  # Wait for infrastructure provisioning
    steps:
      - uses: actions/checkout@v3
      - name: Build Node.js App
        run: npm install && npm run build
      - name: Get Node.js Client IPs from Terraform State
        run: |
          terraform workspace select main  # Replace with your workspace name if different
          NODE_CLIENT_IPS=$(terraform outputs -json | jq -r '.node_client_ips.value | @csv')
          echo "NODE_CLIENT_IPS=$NODE_CLIENT_IPS" >> $GITHUB_ENV  # Export IPs as environment variables
      - name: Deploy to EC2 Instances (loop through IPs)
        run: |
          IFS=',' read -ra IP_ARRAY <<< "$NODE_CLIENT_IPS"
          for IP in "${IP_ARRAY[@]}"; do
            echo "Deploying to IP: $IP"
            # Add your deployment logic here (e.g., SCP files, SSH commands, etc.)
          done
     
